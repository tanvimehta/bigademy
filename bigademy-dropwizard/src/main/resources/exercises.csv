subtopic_id,exercise_id,exercise_name,explanation,problem,solution,load_statement,store_statement,pass_to_backend1,1,Load and Store,"The purpose of pigscript is to generate map reduce jobs which process data and store it. <br/>Where does this data come from and where does it go?<br/><span class=""keyword-highlighting""> LOAD</span> and <span class=""keyword-highlighting"">STORE</span> operators help us define where data is pulled from and where the data is stored. Pig Latin statements work with relations. Hence, the <span class=""keyword-highlighting"">LOAD</span> statements generate relations consisting of different data types which can be manipulated as needed. <span class=""keyword-highlighting"">STORE</span> writes the relations onto the file system in the desired format. A relation in Pig Latin is a bag, where a bag is a collection of tuples and a tuple is an ordered set of fields. (Refer to examples)",Load a given text file(studentInfo.txt) containing studentID and studentName. Store the resulting dataset into a file named myFirstPigScript.txt. The solution for this exercise has already been displayed in the text area.  Please press the Run button at the bottom right to Run your first Pig Script!,"studentInfo = LOAD 'studentInfo.txt' USING PigStorage(',') AS (studentId:chararray, studentName:chararray);STORE studentInfo INTO 'myFirstPigScript.txt' USING PigStorage('#');","studentInfo = LOAD 'studentInfo.txt' USING PigStorage(',') AS (studentId:chararray, studentName:chararray); STORE studentInfo INTO 'myFirstPigScript.txt' USING PigStorage('#');",,02,2,ForEach...Generate,"<span class=""keyword-highlighting"">FOREACH.. GENERATE</span> operator works on columns of data to generate data transformations.","Given a relation with tuples containing student ID and exactly 3 different marks in the form (S1,90,93,88), for each student generate a record containing their ID and the sum of all their marks. ","Result = FOREACH inputData GENERATE studentId, (mark1 + mark2 + mark3) as total;","inputData = LOAD '$input' USING PigStorage(',') AS (studentId:chararray, mark1:int, mark2:int, mark3:int);",,13,3,Filter,"<span class=""keyword-highlighting"">FILTER</span> operator selects tuples from a relation based on the conditions specified. <span class=""keyword-highlighting"">FILTER</span> operator works on rows of data whereas <span class=""keyword-highlighting"">FOREACH..GENERATE</span> (previous lesson) works on columns of data.","Given a relation with tuples containing student ID and exactly 3 different marks in the form {S1,90,93,88}. Generate a list of studentIDs and their average for all students with average between 50 and 70 (inclusive). Ensure that the list only contains students with a non-null studentID.","Average = FOREACH inputData GENERATE studentId, (mark1 + mark2 + mark3)/3 as average; Result = FILTER Average BY (average >= 50) AND (average <= 70) AND (studentId IS NOT null);","inputData = LOAD '$input' USING PigStorage(',') AS (studentId:chararray, mark1:int, mark2:int, mark3:int);",,14,4,Dereference - Tuple,"<span class=""keyword-highlighting"">DEREFERENCE</span> operator is used to retreive the value of a specific field by its position or name in a tuple.","Given a relation with tuples containing student ID, semester code and 3 different marks in the form {S1,Fall-2013,(90,93,88)}, get a list of student ID, semester code and the sum of marks.","Result = FOREACH A GENERATE studentId,semester,(mark.mark1 + mark.mark2 + mark.mark3) as total;","A = LOAD '$input' USING PigStorage(';') AS (studentId:chararray, semester:chararray, mark:tuple(mark1:int, mark2:int, mark3:int));",,14,5,Dereference - Bag,"<span class=""keyword-highlighting"">DEREFERENCE</span> operator is used on bags to project certain fields of each tuple within the bag. <span class=""alert-settings"">Note</span>: The <span class=""keyword-highlighting"">GROUP</span> operator will be used in this chapter to make the explanation for <span class=""keyword-highlighting"">DEREFERENCE</span> clearer. We will be revisiting <span class=""keyword-highlighting"">GROUP</span> operator in a later chapter.","Given an input dataset with each row containing a student ID and their corresponding list of courses taken and marks obtained, calculate each student's average mark","Result = FOREACH A GENERATE  studentId , AVG(courseAndMarkInfo.mark);","A = LOAD '$input' USING PigStorage(';') AS (studentId: chararray, courseAndMarkInfo:bag{tuple(courseId: chararray, mark: int)});",,14,6,Dereference - Tuple/Bag,"<span class=""keyword-highlighting"">DEREFERENCE</span> operator is used on bags to project certain fields of each tuple within the bag. <span class=""alert-settings"">Note</span>: The <span class=""keyword-highlighting"">GROUP</span> operator will be used in this chapter to make the explanation for <span class=""keyword-highlighting"">DEREFERENCE</span> clearer. We will be revisiting <span class=""keyword-highlighting"">GROUP</span> operator in a later chapter.","Given a relation with tuples containing studentID, semester code and totalMark in that semester. Generate a list of studentIDs with the same totalMark over the same semester"," sameMarks = GROUP inputData BY (totalMark,semester); DUMP sameMarks; Result = FOREACH sameMarks GENERATE group.semester, group.totalMark, inputData.studentId;","inputData = LOAD '$input' USING PigStorage(',') AS (studentId:chararray, semester:chararray, totalMark:int);",,15,7,Flatten - Tuple,"For tuples, <span class=""keyword-highlighting"">FLATTEN</span> substitutes the tuple  with the fields within it.","Given a relation with tuples containing studentID(field), semester(field) and a tuple mark with marks for 3 different courses as mark1,mark2,mark3. Generate a relation with the 3 marks as separate fields.","Result = FOREACH A GENERATE studentId, semester, FLATTEN(mark);","A = LOAD '$input' USING PigStorage(';') AS (studentId:chararray, semester:chararray,mark:tuple(mark1:int, mark2:int, mark3:int));",,15,8,Flatten - Bag,"For bags, <span class=""keyword-highlighting"">FLATTEN</span> substitutes tuples in place of the bag. There are also cases when <span class=""keyword-highlighting"">FLATTEN</span> causes a cross product of tuples.  Refer to example 2 for more details.","Given a relation with rows containing a student ID and their corresponding list of courses taken and marks obtained, generate a relation where each row is a list of student ID, course and mark. Store the output relation as {(student id, course id 1, mark1), (student id, course id 2, mark2),..., (student id, course id n, markn)}","Result = FOREACH A GENERATE $0, FLATTEN($1);","A = LOAD '$input' USING PigStorage(';') AS (studentId: chararray, courseAndMarkInfo:bag{tuple(courseId: chararray, mark: int)});",,16,9,Inner Join,"<span class=""keyword-highlighting"">JOIN</span> performs an inner join of two or more relations based on common field values. <span class=""alert-settings"">Note</span>: For all practical purposes an inner join can be thought of as an intersection of multiple relations.","Given a relation containing the course ID and course name, and another relation containing the student ID, mark and course ID. Write a script to generate a relation with the student ID, course ID, course name and the corresponding mark. The resulting relation should only contain students with courses listed in the courses table and courses which were taken by atleast 1 student."," Result = JOIN coursesData BY courseId, marksData BY courseId;","coursesData = LOAD '$courses' USING PigStorage(',') AS (courseId:chararray, courseName:chararray); marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,16,10,Outer Join - Left,"Left outer join always contains all records of the ""left"" table even if the join-condition does not find any matching record in the ""right"" table.","Given a relation containing the course ID and course name, and another relation containing the student ID, mark and course ID. Write a script to generate a relation with the student ID, course ID, course name and the corresponding mark. The resulting relation should only contain students with courses listed in the courses table and all courses whether or not they were taken by a student."," Result = JOIN coursesData BY courseId LEFT OUTER, marksData BY courseId;","coursesData = LOAD '$courses' USING PigStorage(',') AS (courseId:chararray, courseName:chararray); marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,16,11,Outer Join - Right,"Right outer join always contains all records of the ""right"" table even if the join-condition does not find any matching record in the ""left"" table.","Given a relation containing the course ID and course name, and another relation containing the student ID, mark and course ID. Write a script to generate a relation with the student ID, course ID, course name and the corresponding mark.  The resulting relation should only contain courses that were taken by atleast 1 student and all students whether or not their selected courses are listed in the courses table.","Result = JOIN coursesData BY courseId RIGHT OUTER, marksData BY courseId;","coursesData = LOAD '$courses' USING PigStorage(',') AS (courseId:chararray, courseName:chararray); marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,16,12,Outer Join - Full,"Full outer join combines the effect of applying both left and right outer joins. The result set will have NULL values for every column of the table that lacks a matching row in the other relation. <span class=""alert-settings""><br/>Note</span>: For all practical purposes an outer join can be thought of as a union of multiple relations.","Given a relation containing the course ID and course name, and another relation containing the student ID, mark and course ID. Write a script to generate a relation with the student ID, course ID, course name and the corresponding mark. The resulting relation should contain all the tuples from both tables regardless of whether a course was taken by a student or a student took a course apart from the listed courses.","Result = JOIN coursesData BY courseId FULL OUTER, marksData BY courseId;","coursesData = LOAD '$courses' USING PigStorage(',') AS (courseId:chararray, courseName:chararray); marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,17,13,Group - Basic case,,"Given a relation containing the studentID, courseID and mark for all students and all courses. Generate a relation with list of all the students and their marks for every course.",Result = GROUP marksData BY courseId;,"marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,17,14,Group - With Foreach,"The key that the relations are grouped on can be referenced by the name ""group"". This is illustrated by using <span class=""keyword-highlighting"">GROUP</span> operator in combination with the <span class=""keyword-highlighting"">FOREACH</span> operator. Refer example for details.","Given a relation containing student ID, course ID and mark, generate a relation containing the average mark for each course.","allMarks = GROUP marksData BY courseId; Result = FOREACH allMarks GENERATE group, AVG(marksData.mark);","marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,17,15,Group - With Expression,"<span class=""keyword-highlighting"">GROUP BY</span> clause can consist of an expression in place of a field.","Given a relation containing studentID and exactly 3 different marks, generate a relation containing the studentIDs and marks of all the students with the same average.", Result = GROUP marksData BY ((mark1+mark2 +mark3)/3);,"marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, mark1:int, mark2:int, mark3:int);",,17,16,Group - With multiple fields,<span class=keyword-highlighting>GROUP BY</span> clause can consist more than one field.,"Given a relation containing studentID, courseID and mark. Generate a relation containing the list of students who scored the same mark for a particular course.","Result = GROUP marksData BY (courseId, mark);","marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int); ",,17,17,Group - Foreach block,For more powerful computation and processing we could use <span class=keyword-highlighting>GROUP</span> in combination with a nested <span class=keyword-highlighting>FOREACH</span> block. Where the <span class=keyword-highlighting>FOREACH</span> block generates data based on the result from the <span class=keyword-highlighting>GROUP BY</span> clause. Refer to the example.,"Given a relation containing student ID, course ID and mark, generate a relation containing course id and student ID of all students who scored more than 70 in that course.","allMarks = GROUP marksData BY courseId; Result = FOREACH allMarks { aboveAverage = FILTER marksData BY (mark > 70); GENERATE group, aboveAverage.studentId;};","marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,17,18,CoGroup,Both operators work with one or more relations. For readability <span class=keyword-highlighting>GROUP</span> is used in statements involving one relation and <span class=keyword-highlighting>COGROUP</span> is used in statements involving two or more relations. You can <span class=keyword-highlighting>COGROUP</span> up to but no more than 127 relations at a time.,"Given two relations containing student information and course information as specified below, find the average mark for each course and professor in a particular semester. The output dataset should only contain the professor name and the average mark.","coGroupedData = COGROUP studentMarkInfo BY (courseId, semId), courseInfo BY (courseId, semId);Result = FOREACH coGroupedData {   avgMark = AVG(studentMarkInfo.marks);   GENERATE     FLATTEN(courseInfo.profName), avgMark;};","studentMarkInfo = LOAD '$studentMarks' USING PigStorage(',') AS (courseId: int, semId: int, studentId: int, marks: int);courseInfo = LOAD '$courses' USING PigStorage(',') AS (courseId: int, semId: int, profName: chararray);",,18,19,DISTINCT,Removes duplicate tuples in a relation.,"Given a relation containing studentID, courseID and mark, generate a relation without any duplicate entries.",Result = DISTINCT marksData;,"marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,19,20,ORDER BY,Sorts a relation based on one or more fields.,"Given a relation containing studentID, courseID and mark, generate a relation ordered by studentID and marks.","Result = ORDER marksData BY studentId ASC, courseId ASC;","marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,110,21,LIMIT,Limits the number of output tuples.,"Given a relation containing studentID, courseID and mark, generate a relation with the 3 highest scorers.",orderedMarks = ORDER marksData BY mark DESC; Result = LIMIT orderedMarks 3;,"marksData = LOAD '$marks' USING PigStorage(',') AS (studentId:chararray, courseId:chararray, mark:int);",,111,22,Union - Basic Case,,Given two relations containing studentID and mark. Generate a relation with tuples from both relations.,"allStudents = UNION studentsData1, studentsData2; Result = ORDER allStudents BY studentId ASC, mark ASC;","studentsData1 = LOAD '$students1' USING PigStorage(',') AS (studentId:chararray, mark:int); studentsData2 = LOAD '$students2' USING PigStorage(',') AS (studentId:chararray, mark:int);",,111,23,Union - with ONSCHEMA clause,"In most cases, the relations used with the <span class=""keyword-highlighting"">UNION</span> operator have the same schema. If this is not the case and the user wants the resulting relation to have a specific schema based on the names of the fields and not their positions, <span class=""keyword-highlighting"">ONSCHEMA</span> clause can be used. <span class=""keyword-highlighting"">ONSCHEMA</span> clause is used to base the union on named fields (rather than positional notation). All inputs to the union must have a known (non-null) schema.","Given two relations , one containing studentID and mark and the other containing mark and studentID. Generate a relation with all the tuples from both tables. The resulting schema should be {studentID, mark}.","allStudents = UNION ONSCHEMA studentsData1, studentsData2; Result = ORDER allStudents BY studentId ASC, mark ASC;","studentsData1 = LOAD '$students1' USING PigStorage(',') AS (studentId:chararray, mark:int); studentsData2 = LOAD '$students2' USING PigStorage(',') AS (mark:int, studentId:chararray);",,112,24,SPLIT,"<span class=""keyword-highlighting"">SPLIT</span> operator is used to partition the contents of a relation into two or more relations based on some expression. The tuple may be assigned to more than one relation or may not be assigned to any relation depending on the conditions specified in the expression.","Given a relation containing studentID and mark, generate 3 relations with students divided into 3 categories namely, Below Average, Average and Above Average. Below Average: <=50 Average: 50<mark<=70 Above Average: >70","SPLIT studentsData INTO belowAvg IF mark<=50, Avg IF (mark>50 AND mark<=70), aboveAvg IF (mark>70);","studentsData = LOAD '$students' USING PigStorage(',') AS (studentId:chararray, mark:int);",,1
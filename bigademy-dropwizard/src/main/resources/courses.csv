course_id,course_name,explanation,image1,Pig Latin,"<div class=""text-setting center-text"">Pig Latin is a high level language used to create MapReduce programs.<br/><br/></div><div class=""panel panel-success""><div class=""panel-heading course-intro-panel-header"">MapReduce programs</div><div class=""panel-body""><span class=""bold-text tab"">MapReduce</span> is a programming model that uses a parallel, distributed algorithm to process large amounts of data. MapReduce consists of 2 procedures namely Map() and Reduce(). The Map() procedure processes the input data by filtering and sorting resulting in tuples(key/value pairs). The Reduce() takes in the output of the Map() procedure as input and performs a summary operation.<br/><br/></div></div><div class=""panel panel-success""><div class=""panel-heading course-intro-panel-header"">MapReduce Example</div><div class=""panel-body"">The following MapReduce example counts the appearance of each word in a set of documents:<br/><span class=""bold-text double-tab"">function</span> map(String name, String document):<br/>  <span class=""italic-text triple-tab"">// name: document name</span><br/>  <span class=""italic-text triple-tab"">// document: document contents</span><br/>  <span class=""bold-text triple-tab"">for each</span> word w <span class=""bold-text"">in</span> document:<br/>    <span class=""four-tab"" />emit (w, 1)<br/><br/><span class=""bold-text double-tab"">function</span> reduce(String word, Iterator partialCounts):<br/>  <span class=""italic-text triple-tab"">// word: a word</span><br/>  <span class=""italic-text triple-tab"">// partialCounts: a list of aggregated partial counts</span><br/>  <span class=""triple-tab"" />sum = 0<br/>  <span class=""bold-text triple-tab"">for each</span> pc <span class=""bold-text"">in</span> partialCounts:<br/>    <span class=""four-tab"" />sum += ParseInt(pc)<br/>  <span class=""four-tab"" />emit (word, sum)<br/><br/>Here, each document is split into words, and each word is counted by the map function, using the word as the result key. The framework puts together all the pairs with the same key and feeds them to the same call to reduce. Thus, this function just needs to sum all of its input values to find the total appearances of that word.</div></div><div class=""text-setting"">MapReduce programs can be written using languages such as Java, Python etc. but these implementations are known to have a high degree of complexity. Therefore, Pig Latin is used to write the data processing code which in turn generates these MapReduce jobs.<br/><br/></div><div class=""panel panel-success""><div class=""panel-heading course-intro-panel-header"">Pig Example</div><div class=""panel-body""> Pig implementation of the word count problem.<br/><span class=""double-tab"">input_lines = <span class=""bold-text"">LOAD</span> '/tmp/my-copy-of-all-pages-on-internet' <span class=""bold-text"">AS</span> (line:chararray);<br/><br/><span class=""double-tab"" /><span class=""italic-text"">-- Extract words from each line and put them into a pig bag</span><br/><span class=""double-tab"" /><span class=""italic-text"">-- datatype, then flatten the bag to get one word on each row</span><br/><span class=""double-tab"" />words = <span class=""bold-text"">FOREACH</span> input_lines <span class=""bold-text"">GENERATE</span> <span class=""bold-text"">FLATTEN</span>(TOKENIZE(line)) <span class=""bold-text"">AS</span> word;<br/><br/><span class=""double-tab"" /><span class=""italic-text"">-- create a group for each word</span><br/><span class=""double-tab"" />word_groups = <span class=""bold-text"">GROUP</span> words <span class=""bold-text"">BY</span> word;<br/><br/><span class=""double-tab"" /><span class=""italic-text"">-- count the entries in each group</span><br/><span class=""double-tab"" />word_count = <span class=""bold-text"">FOREACH</span> word_groups <span class=""bold-text"">GENERATE COUNT</span>(filtered_words) <span class=""bold-text"">AS</span> count, group AS word;<br/><br/><span class=""double-tab"" /><span class=""italic-text"">-- Display each word with its count</span><br/><span class=""double-tab"" /><span class=""bold-text"">DUMP</span> word_count;</div></div><div class=""text-setting"">As you can see above, the word count problem was solved using simple Pig commands in 5 lines. Hence Pig Latin is known and appreciated for its ease of programming.</div><br/>",images/pig.png